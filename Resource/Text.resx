<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema

    Version 1.3

    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
      [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
      [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>

    There are any number of "resheader" rows that contain simple 
    name/value pairs.

    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.

    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
      : System.Serialization.Formatters.Binary.BinaryFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
      : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
      : using a System.ComponentModel.TypeConverter
      : and then encoded with base64 encoding.
  -->

  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Sharp" xml:space="preserve">
    <value>#</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Chef</value>
  </data>
  <data name="MainMenu" xml:space="preserve">
    <value>
Main menu:
[1] -- About vegetables in the salad
[2] -- Caloricity of salad
[3] -- Sort vegetables by color
[4] -- Search vegetables by calories per unit of weigth
[5] -- Search vegetable by Id
[6] -- Storage

[Q] -- Exit
    </value>
  </data>
  <data name="StorageMenu" xml:space="preserve">
    <value>
Storage Menu:
[1] -- Export
[2] -- Import

[Q] -- Exit
    </value>
  </data>
  <data name="ExportMenu" xml:space="preserve">
    <value>
Export Menu:
[1] -- To txt's file
[2] -- To bin's file
[3] -- To JSON
[4] -- To DB

[Q] -- Exit
    </value>
  </data>
  <data name="ImportMenu" xml:space="preserve">
    <value>
Import Menu:
[1] -- From txt's file
[2] -- From bin's file
[3] -- From JSON
[4] -- From DB

[Q] -- Exit
    </value>
  </data>
  <data name="AboutVegetables" xml:space="preserve">
    <value>About vegetables in the salad:</value>
  </data>
  <data name="AboutCaloricity" xml:space="preserve">
    <value>Caloricity of salad: {0}</value>
  </data>
  <data name="QuestionRange" xml:space="preserve">
    <value>Could you please specify max calorie of vegetable per unit of weigth?</value>
  </data>
  <data name="QuestionId" xml:space="preserve">
    <value>Could you please specify id of vegetable?</value>
  </data>
  <data name="ErrorRange" xml:space="preserve">
    <value>You input incorrect max calorie of vegetable per unit of weigth. 
Max calorie of vegetable per unit of weigth must be integer.</value>
  </data>
  <data name="ResultEmpty" xml:space="preserve">
    <value>Result of search is empty.</value>
  </data>
  <data name="PressAnyKey" xml:space="preserve">
    <value>Please press any key to exit in the main menu.</value>
  </data>
  <!--About vegatable-->
  <data name="Id" xml:space="preserve">
    <value>Id:</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Vegetable:</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color:</value>
  </data>
  <data name="Weight" xml:space="preserve">
    <value>Weight, g:</value>
  </data>
  <data name="UnitOfWeigth" xml:space="preserve">
    <value>Unit Of Weigth, g:</value>
  </data>
  <data name="CaloriesPerUnitWeigth" xml:space="preserve">
    <value>Calories per {0} g.:</value>
  </data>
  <data name="TotalCalories" xml:space="preserve">
    <value>Total calories:</value>
  </data>
  <!--Exception Error-->
  <data name="ColorIsUndefined" xml:space="preserve">
    <value>Color is undefined.</value>
  </data>
  <data name="ColorOfVegetable" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="NameIsUndefined" xml:space="preserve">
    <value>Name is undefined.</value>
  </data>
  <data name="NameOfVegetable" xml:space="preserve">
    <value>Vegetable</value>
  </data>
  <data name="SaladIsEmpty" xml:space="preserve">
    <value>Salad doesn't have any vegetable.</value>
  </data>
  <data name="VegetableIsNull" xml:space="preserve">
    <value>Some object isn't vegetable.</value>
  </data>
  <data name="NotExistId" xml:space="preserve">
    <value>The vegetable doesn't exist with Id = {0}.</value>
  </data>
  <data name="OneVegetable" xml:space="preserve">
    <value>Salad contains only one vegetable:
{0}.</value>
     </data>
  <data name="SameVegetable" xml:space="preserve">
    <value>Salad contains same vegetable.</value>
  </data>
  <!--For test-->
  <data name="CheckToString" xml:space="preserve">
    <value>About vegetables in the salad:</value>
  </data>
  <!--CommonForStorage-->
  <data name="AboutSavedFile" xml:space="preserve">
    <value>Info about the salad has saved in {0}</value>
  </data>
  <data name="FileNotSaved" xml:space="preserve">
    <value>Info about the salad has not saved. File {0} has not created.</value>
  </data>
  <data name="AboutLoadFile" xml:space="preserve">
    <value>Info about the salad has loaded from {0}</value>
  </data>
  <data name="FileNotLoaded" xml:space="preserve">
    <value>Info about the salad has not loaded. File {0} has been not found, contains incorrect data or is empty.</value>
  </data>
  <!--ToTxt-->
  <data name="TxtFile" xml:space="preserve">
    <value>SavedFile.txt</value>
  </data>
  <data name="SpliterOfData" xml:space="preserve">
    <value>#</value>
  </data>
  <data name="SpliterOfTitle" xml:space="preserve">
    <value>:</value>
  </data>
  <!--ToBin-->
  <data name="BinFile" xml:space="preserve">
    <value>SavedFile.data</value>
  </data>
  <!--ToJSON-->
  <data name="JSONFile" xml:space="preserve">
    <value>SavedFile.json</value>
  </data>
  <!--DB-->
  <data name="FileDB" xml:space="preserve">
    <value>Chef.mdf</value>
  </data>
  <data name="PathToDB" xml:space="preserve">
    <value>{0}\{1}</value>
  </data>
</root>